   1               		.file	"split_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.is_keyboard_master,"ax",@progbits
  11               		.weak	is_keyboard_master
  13               	is_keyboard_master:
  14               	.LFB114:
  15               		.file 1 "quantum/split_common/split_util.c"
   1:quantum/split_common/split_util.c **** #include "split_util.h"
   2:quantum/split_common/split_util.c **** #include "matrix.h"
   3:quantum/split_common/split_util.c **** #include "keyboard.h"
   4:quantum/split_common/split_util.c **** #include "config.h"
   5:quantum/split_common/split_util.c **** #include "timer.h"
   6:quantum/split_common/split_util.c **** #include "transport.h"
   7:quantum/split_common/split_util.c **** #include "quantum.h"
   8:quantum/split_common/split_util.c **** #include "wait.h"
   9:quantum/split_common/split_util.c **** 
  10:quantum/split_common/split_util.c **** #ifdef PROTOCOL_LUFA
  11:quantum/split_common/split_util.c **** #    include <LUFA/Drivers/USB/USB.h>
  12:quantum/split_common/split_util.c **** #endif
  13:quantum/split_common/split_util.c **** 
  14:quantum/split_common/split_util.c **** #ifdef PROTOCOL_VUSB
  15:quantum/split_common/split_util.c **** #    include "usbdrv.h"
  16:quantum/split_common/split_util.c **** #endif
  17:quantum/split_common/split_util.c **** 
  18:quantum/split_common/split_util.c **** #ifdef EE_HANDS
  19:quantum/split_common/split_util.c **** #    include "eeconfig.h"
  20:quantum/split_common/split_util.c **** #endif
  21:quantum/split_common/split_util.c **** 
  22:quantum/split_common/split_util.c **** #if defined(RGBLIGHT_ENABLE) && defined(RGBLED_SPLIT)
  23:quantum/split_common/split_util.c **** #    include "rgblight.h"
  24:quantum/split_common/split_util.c **** #endif
  25:quantum/split_common/split_util.c **** 
  26:quantum/split_common/split_util.c **** #ifndef SPLIT_USB_TIMEOUT
  27:quantum/split_common/split_util.c **** #    define SPLIT_USB_TIMEOUT 2000
  28:quantum/split_common/split_util.c **** #endif
  29:quantum/split_common/split_util.c **** 
  30:quantum/split_common/split_util.c **** #ifndef SPLIT_USB_TIMEOUT_POLL
  31:quantum/split_common/split_util.c **** #    define SPLIT_USB_TIMEOUT_POLL 10
  32:quantum/split_common/split_util.c **** #endif
  33:quantum/split_common/split_util.c **** 
  34:quantum/split_common/split_util.c **** #ifdef PROTOCOL_CHIBIOS
  35:quantum/split_common/split_util.c **** #    define SPLIT_USB_DETECT  // Force this on for now
  36:quantum/split_common/split_util.c **** #endif
  37:quantum/split_common/split_util.c **** 
  38:quantum/split_common/split_util.c **** volatile bool isLeftHand = true;
  39:quantum/split_common/split_util.c **** 
  40:quantum/split_common/split_util.c **** #if defined(SPLIT_USB_DETECT)
  41:quantum/split_common/split_util.c **** #    if defined(PROTOCOL_LUFA)
  42:quantum/split_common/split_util.c **** static inline bool usbHasActiveConnection(void) { return USB_Device_IsAddressSet(); }
  43:quantum/split_common/split_util.c **** static inline void usbDisable(void) {
  44:quantum/split_common/split_util.c ****     USB_Disable();
  45:quantum/split_common/split_util.c ****     USB_DeviceState = DEVICE_STATE_Unattached;
  46:quantum/split_common/split_util.c **** }
  47:quantum/split_common/split_util.c **** #    elif defined(PROTOCOL_CHIBIOS)
  48:quantum/split_common/split_util.c **** static inline bool usbHasActiveConnection(void) { return usbGetDriverStateI(&USBD1) == USB_ACTIVE; 
  49:quantum/split_common/split_util.c **** static inline void usbDisable(void) { usbStop(&USBD1); }
  50:quantum/split_common/split_util.c **** #    elif defined(PROTOCOL_VUSB)
  51:quantum/split_common/split_util.c **** static inline bool usbHasActiveConnection(void) {
  52:quantum/split_common/split_util.c ****     usbPoll();
  53:quantum/split_common/split_util.c ****     return usbConfiguration;
  54:quantum/split_common/split_util.c **** }
  55:quantum/split_common/split_util.c **** static inline void usbDisable(void) { usbDeviceDisconnect(); }
  56:quantum/split_common/split_util.c **** #    else
  57:quantum/split_common/split_util.c **** static inline bool usbHasActiveConnection(void) { return true; }
  58:quantum/split_common/split_util.c **** static inline void usbDisable(void) {}
  59:quantum/split_common/split_util.c **** #    endif
  60:quantum/split_common/split_util.c **** 
  61:quantum/split_common/split_util.c **** bool usbIsActive(void) {
  62:quantum/split_common/split_util.c ****     for (uint8_t i = 0; i < (SPLIT_USB_TIMEOUT / SPLIT_USB_TIMEOUT_POLL); i++) {
  63:quantum/split_common/split_util.c ****         // This will return true if a USB connection has been established
  64:quantum/split_common/split_util.c ****         if (usbHasActiveConnection()) {
  65:quantum/split_common/split_util.c ****             return true;
  66:quantum/split_common/split_util.c ****         }
  67:quantum/split_common/split_util.c ****         wait_ms(SPLIT_USB_TIMEOUT_POLL);
  68:quantum/split_common/split_util.c ****     }
  69:quantum/split_common/split_util.c **** 
  70:quantum/split_common/split_util.c ****     // Avoid NO_USB_STARTUP_CHECK - Disable USB as the previous checks seem to enable it somehow
  71:quantum/split_common/split_util.c ****     usbDisable();
  72:quantum/split_common/split_util.c **** 
  73:quantum/split_common/split_util.c ****     return false;
  74:quantum/split_common/split_util.c **** }
  75:quantum/split_common/split_util.c **** #elif defined(PROTOCOL_LUFA) && defined(OTGPADE)
  76:quantum/split_common/split_util.c **** static inline bool usbIsActive(void) {
  77:quantum/split_common/split_util.c ****     USB_OTGPAD_On();  // enables VBUS pad
  78:quantum/split_common/split_util.c ****     wait_us(5);
  79:quantum/split_common/split_util.c **** 
  80:quantum/split_common/split_util.c ****     return USB_VBUS_GetStatus();  // checks state of VBUS
  81:quantum/split_common/split_util.c **** }
  82:quantum/split_common/split_util.c **** #else
  83:quantum/split_common/split_util.c **** static inline bool usbIsActive(void) { return true; }
  84:quantum/split_common/split_util.c **** #endif
  85:quantum/split_common/split_util.c **** 
  86:quantum/split_common/split_util.c **** #ifdef SPLIT_HAND_MATRIX_GRID
  87:quantum/split_common/split_util.c **** void matrix_io_delay(void);
  88:quantum/split_common/split_util.c **** 
  89:quantum/split_common/split_util.c **** static uint8_t peek_matrix_intersection(pin_t out_pin, pin_t in_pin) {
  90:quantum/split_common/split_util.c ****     setPinInputHigh(in_pin);
  91:quantum/split_common/split_util.c ****     setPinOutput(out_pin);
  92:quantum/split_common/split_util.c ****     writePinLow(out_pin);
  93:quantum/split_common/split_util.c ****     // It's almost unnecessary, but wait until it's down to low, just in case.
  94:quantum/split_common/split_util.c ****     wait_us(1);
  95:quantum/split_common/split_util.c ****     uint8_t pin_state = readPin(in_pin);
  96:quantum/split_common/split_util.c ****     // Set out_pin to a setting that is less susceptible to noise.
  97:quantum/split_common/split_util.c ****     setPinInputHigh(out_pin);
  98:quantum/split_common/split_util.c ****     matrix_io_delay(); // Wait for the pull-up to go HIGH.
  99:quantum/split_common/split_util.c ****     return pin_state;
 100:quantum/split_common/split_util.c **** }
 101:quantum/split_common/split_util.c **** #endif
 102:quantum/split_common/split_util.c **** 
 103:quantum/split_common/split_util.c **** __attribute__((weak)) bool is_keyboard_left(void) {
 104:quantum/split_common/split_util.c **** #if defined(SPLIT_HAND_PIN)
 105:quantum/split_common/split_util.c ****     // Test pin SPLIT_HAND_PIN for High/Low, if low it's right hand
 106:quantum/split_common/split_util.c ****     setPinInput(SPLIT_HAND_PIN);
 107:quantum/split_common/split_util.c ****     return readPin(SPLIT_HAND_PIN);
 108:quantum/split_common/split_util.c **** #elif defined(SPLIT_HAND_MATRIX_GRID)
 109:quantum/split_common/split_util.c **** #   ifdef SPLIT_HAND_MATRIX_GRID_LOW_IS_RIGHT
 110:quantum/split_common/split_util.c ****     return peek_matrix_intersection(SPLIT_HAND_MATRIX_GRID);
 111:quantum/split_common/split_util.c **** #   else
 112:quantum/split_common/split_util.c ****     return !peek_matrix_intersection(SPLIT_HAND_MATRIX_GRID);
 113:quantum/split_common/split_util.c **** #   endif
 114:quantum/split_common/split_util.c **** #elif defined(EE_HANDS)
 115:quantum/split_common/split_util.c ****     return eeconfig_read_handedness();
 116:quantum/split_common/split_util.c **** #elif defined(MASTER_RIGHT)
 117:quantum/split_common/split_util.c ****     return !is_keyboard_master();
 118:quantum/split_common/split_util.c **** #endif
 119:quantum/split_common/split_util.c **** 
 120:quantum/split_common/split_util.c ****     return is_keyboard_master();
 121:quantum/split_common/split_util.c **** }
 122:quantum/split_common/split_util.c **** 
 123:quantum/split_common/split_util.c **** __attribute__((weak)) bool is_keyboard_master(void) {
  16               		.loc 1 123 53 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 124:quantum/split_common/split_util.c ****     static enum { UNKNOWN, MASTER, SLAVE } usbstate = UNKNOWN;
  22               		.loc 1 124 5 view .LVU1
 125:quantum/split_common/split_util.c **** 
 126:quantum/split_common/split_util.c ****     // only check once, as this is called often
 127:quantum/split_common/split_util.c ****     if (usbstate == UNKNOWN) {
  23               		.loc 1 127 5 view .LVU2
  24               		.loc 1 127 8 is_stmt 0 view .LVU3
  25 0000 8091 0000 		lds r24,usbstate.6078
  26 0004 8111      		cpse r24,__zero_reg__
  27 0006 00C0      		rjmp .L2
 128:quantum/split_common/split_util.c ****         usbstate = usbIsActive() ? MASTER : SLAVE;
  28               		.loc 1 128 9 is_stmt 1 view .LVU4
  29               	.LBB16:
  30               	.LBI16:
  76:quantum/split_common/split_util.c ****     USB_OTGPAD_On();  // enables VBUS pad
  31               		.loc 1 76 20 view .LVU5
  32               	.LBE16:
  77:quantum/split_common/split_util.c ****     wait_us(5);
  33               		.loc 1 77 5 view .LVU6
  34               	.LBB23:
  35               	.LBB17:
  36               	.LBI17:
  37               		.file 2 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****      Copyright (C) Dean Camera, 2019.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Copyright 2019  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \copydetails Group_USBManagement_AVR8
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \ingroup Group_USBManagement
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \defgroup Group_USBManagement_AVR8 USB Interface Management (AVR8)
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  @{
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #ifndef __USBCONTROLLER_AVR8_H__
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #define __USBCONTROLLER_AVR8_H__
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Includes: */
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBMode.h"
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../Events.h"
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBTask.h"
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBInterrupt.h"
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Host.h"
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../OTG.h"
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Pipe.h"
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../HostStandardReq.h"
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../PipeStream.h"
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Device.h"
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Endpoint.h"
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../DeviceStandardReq.h"
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../EndpointStream.h"
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(__cplusplus)
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			extern "C" {
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Preprocessor Checks and Defines: */
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(F_USB)
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error F_USB is not defined. You must define F_USB to the frequency of the unprescaled USB contr
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if (F_USB == 8000000)
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__))
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#elif (F_USB == 16000000)
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__))
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(USB_PLL_PSC)
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error No PLL prescale value available for chosen F_USB value and AVR model.
 115:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 116:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 117:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Macros: */
 119:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** \name USB Controller Option Masks */
 120:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@{
 121:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 122:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 123:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 124:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 125:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 126:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 127:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 128:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 129:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be enabled to regulate the data pin voltages from the VBUS level down to a 
 130:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  the range allowable by the USB standard.
 131:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 132:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 133:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 134:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 135:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 136:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Option mask for \ref USB_Init() to keep regulator enabled at all times. Indicates that \ref 
 137:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  should not disable the regulator as it would otherwise. Has no effect if regulator is disabl
 138:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \ref USB_OPT_REG_DISABLED.
 139:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 140:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 141:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 142:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_KEEP_ENABLED           (1 << 3)
 143:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 144:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 145:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 146:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 147:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 148:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 149:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 150:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 151:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 152:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 153:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 154:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 155:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@}
 156:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 157:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 158:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 159:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 160:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 161:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 162:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 163:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 164:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 165:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 166:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 167:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 168:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Inline Functions: */
 169:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 170:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Determines if the VBUS line is currently high (i.e. the USB host is supplying power).
 171:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 172:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 173:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 174:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false
 175:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void)
 178:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				{
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 180:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
 181:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 182:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 183:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 184:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 185:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 186:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 187:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 188:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void)
 189:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 190:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UDCON  |=  (1 << DETACH);
 191:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			}
 192:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 193:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Attaches the device to the USB bus. This announces the device's presence to any attached
 194:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  USB host, starting the enumeration process. If no host is present, attaching the device
 195:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  will allow for enumeration once a host is connected to the device.
 196:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 197:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  This is inexplicably also required for proper operation while in host mode, to enable the
 198:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  attachment of a device to the host. This is despite the bit being located in the device-mode
 199:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  register and despite the datasheet making no mention of its requirement in host mode.
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 201:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
 202:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Attach(void)
 203:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 204:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UDCON  &= ~(1 << DETACH);
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			}
 206:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Function Prototypes: */
 208:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Main function to initialize and start the USB interface. Once active, the USB interface will
 209:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  allow for device connection to a host when in device mode, or for device enumeration while i
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  host mode.
 211:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 212:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  As the USB library relies on interrupts for the device and host mode enumeration processes,
 213:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  the user must enable global interrupts before or shortly after this function is called. In
 214:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  device mode, interrupts must be enabled within 500ms of this function being called to ensure
 215:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the host does not time out whilst enumerating the device. In host mode, interrupts may 
 216:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  enabled at the application's leisure however enumeration will not begin of an attached devic
 217:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  until after this has occurred.
 218:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 219:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  Calling this function when the USB interface is already initialized will cause a complete US
 220:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  interface reset and re-enumeration.
 221:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 222:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \param[in] Mode     Mask indicating what mode the USB interface is to be initialized to, a v
 223:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *                      from the \ref USB_Modes_t enum.
 224:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *                      \note This parameter does not exist on devices with only one supported U
 225:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *                            mode (device or host).
 226:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \param[in] Options  Mask indicating the options which should be used when initializing the U
 228:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *                      interface to control the USB interface's behavior. This should be compri
 229:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *                      a \c USB_OPT_REG_* mask to control the regulator, a \c USB_OPT_*_PLL mas
 230:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *                      PLL, and a \c USB_DEVICE_OPT_* mask (when the device mode is enabled) to
 231:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *                      mode speed.
 232:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 233:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note To reduce the FLASH requirements of the library if only device or host mode is require
 234:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        the mode can be statically set in the project makefile by defining the token \c USB_DE
 235:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        (for device mode) or \c USB_HOST_ONLY (for host mode), passing the token to the compil
 236:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        via the -D switch. If the mode is statically set, this parameter does not exist in the
 237:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        function prototype.
 238:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        \n\n
 239:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note To reduce the FLASH requirements of the library if only fixed settings are required,
 241:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        the options may be set statically in the same manner as the mode (see the Mode paramet
 242:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        this function). To statically set the USB options, pass in the \c USE_STATIC_OPTIONS t
 243:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        defined to the appropriate options masks. When the options are statically set, this
 244:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        parameter does not exist in the function prototype.
 245:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        \n\n
 246:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 247:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note The mode parameter does not exist on devices where only one mode is possible, such as 
 248:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *        AVR models which only implement the USB device mode in hardware.
 249:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 250:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \see \ref Group_Device for the \c USB_DEVICE_OPT_* masks.
 251:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 252:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			void USB_Init(
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               #if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 254:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               const uint8_t Mode
 255:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               #endif
 256:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 257:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               #if (defined(USB_CAN_BE_BOTH) && !defined(USE_STATIC_OPTIONS)) || defined(__DOXYG
 258:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               ,
 259:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               #elif (!defined(USB_CAN_BE_BOTH) && defined(USE_STATIC_OPTIONS))
 260:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               void
 261:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               #endif
 262:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 263:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               #if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 264:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               const uint8_t Options
 265:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               #endif
 266:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			               );
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 268:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Shuts down the USB interface. This turns off the USB interface after deallocating all USB FI
 269:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  memory, endpoints and pipes. When turned off, no USB functionality can be used until the int
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  is restarted with the \ref USB_Init() function.
 271:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 272:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			void USB_Disable(void);
 273:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 274:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Resets the interface, when already initialized. This will re-enumerate the device if already
 275:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  to a host, or re-enumerate an already attached device when in host mode.
 276:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 277:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			void USB_ResetInterface(void);
 278:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 279:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Global Variables: */
 280:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 281:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Indicates the mode that the USB interface is currently initialized to, a value from the
 282:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \ref USB_Modes_t enum.
 283:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 284:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \attention This variable should be treated as read-only in the user application, and never 
 285:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *             changed in value.
 286:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 287:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \note When the controller is initialized into UID auto-detection mode, this variable will h
 288:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *        currently selected USB mode (i.e. \ref USB_MODE_Device or \ref USB_MODE_Host). If the
 289:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *        is fixed into a specific mode (either through the \c USB_DEVICE_ONLY or \c USB_HOST_O
 290:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *        options, or a limitation of the USB controller in the chosen device model) this will 
 291:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *        a constant of the appropriate value and will never evaluate to \ref USB_MODE_None eve
 292:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *        USB interface is not initialized.
 293:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 294:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				extern volatile uint8_t USB_CurrentMode;
 295:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif defined(USB_CAN_BE_HOST)
 296:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_CurrentMode USB_MODE_Host
 297:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif defined(USB_CAN_BE_DEVICE)
 298:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_CurrentMode USB_MODE_Device
 299:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 300:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 301:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 302:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Indicates the current USB options that the USB interface was initialized with when \ref USB
 303:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  was called. This value will be one of the \c USB_MODE_* masks defined elsewhere in this mod
 304:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 305:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \attention This variable should be treated as read-only in the user application, and never 
 306:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *             changed in value.
 307:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 308:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				extern volatile uint8_t USB_Options;
 309:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif defined(USE_STATIC_OPTIONS)
 310:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_Options USE_STATIC_OPTIONS
 311:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 312:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Private Interface - For use in library only: */
 314:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	#if !defined(__DOXYGEN__)
 315:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Function Prototypes: */
 316:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(__INCLUDE_FROM_USB_CONTROLLER_C)
 317:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#if defined(USB_CAN_BE_DEVICE)
 318:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static void USB_Init_Device(void);
 319:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#endif
 320:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 321:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#if defined(USB_CAN_BE_HOST)
 322:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static void USB_Init_Host(void);
 323:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#endif
 324:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 325:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 326:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Inline Functions: */
 327:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
 328:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_PLL_On(void)
 329:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 330:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				PLLCSR = USB_PLL_PSC;
 331:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 332:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			}
 333:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 334:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
 335:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_PLL_Off(void)
 336:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 337:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				PLLCSR = 0;
 338:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			}
 339:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 340:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline bool USB_PLL_IsReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 341:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline bool USB_PLL_IsReady(void)
 342:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 343:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				return ((PLLCSR & (1 << PLOCK)) ? true : false);
 344:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			}
 345:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 346:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
 347:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_REG_On(void)
 348:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 349:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 350:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UHWCON |=  (1 << UVREGE);
 351:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#else
 352:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				REGCR  &= ~(1 << REGDIS);
 353:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 354:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			}
 355:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 356:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
 357:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_REG_Off(void)
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 359:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UHWCON &= ~(1 << UVREGE);
 361:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#else
 362:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				REGCR  |=  (1 << REGDIS);
 363:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 364:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			}
 365:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 366:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 367:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
 368:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_OTGPAD_On(void)
  38               		.loc 2 368 23 view .LVU7
  39               	.LBB18:
 369:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				USBCON |=  (1 << OTGPADE);
  40               		.loc 2 370 5 view .LVU8
  41               		.loc 2 370 12 is_stmt 0 view .LVU9
  42 0008 8091 D800 		lds r24,216
  43 000c 8061      		ori r24,lo8(16)
  44 000e 8093 D800 		sts 216,r24
  45               	.LBE18:
  46               	.LBE17:
  47               	.LBE23:
  78:quantum/split_common/split_util.c **** 
  48               		.loc 1 78 5 is_stmt 1 view .LVU10
  49               	.LVL0:
  50               	.LBB24:
  51               	.LBB19:
  52               	.LBI19:
  53               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** _delay_us(double __us)
  54               		.loc 3 255 1 view .LVU11
  55               	.LBB20:
 256:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	double __tmp ;
  56               		.loc 3 257 2 view .LVU12
 258:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  57               		.loc 3 261 2 view .LVU13
 262:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  58               		.loc 3 262 2 view .LVU14
 263:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
  59               		.loc 3 263 2 view .LVU15
 264:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  60               		.loc 3 273 3 view .LVU16
 274:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  61               		.loc 3 276 2 view .LVU17
  62 0012 8AE1      		ldi r24,lo8(26)
  63 0014 8A95      	1:	dec r24
  64 0016 01F4      		brne 1b
  65 0018 00C0      		rjmp .
  66               	.LVL1:
  67               		.loc 3 276 2 is_stmt 0 view .LVU18
  68               	.LBE20:
  69               	.LBE19:
  70               	.LBE24:
  80:quantum/split_common/split_util.c **** }
  71               		.loc 1 80 5 is_stmt 1 view .LVU19
  72               	.LBB25:
  73               	.LBB21:
  74               	.LBI21:
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				{
  75               		.loc 2 177 24 view .LVU20
  76               	.LBB22:
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
  77               		.loc 2 179 6 view .LVU21
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
  78               		.loc 2 179 15 is_stmt 0 view .LVU22
  79 001a 9091 D900 		lds r25,217
  80               	.LBE22:
  81               	.LBE21:
  82               	.LBE25:
  83               		.loc 1 128 43 view .LVU23
  84 001e 892F      		mov r24,r25
  85 0020 8170      		andi r24,lo8(1)
  86 0022 90FF      		sbrs r25,0
  87 0024 82E0      		ldi r24,lo8(2)
  88               	.L3:
  89               		.loc 1 128 18 discriminator 4 view .LVU24
  90 0026 8093 0000 		sts usbstate.6078,r24
  91               	.L2:
 129:quantum/split_common/split_util.c ****     }
 130:quantum/split_common/split_util.c **** 
 131:quantum/split_common/split_util.c ****     return (usbstate == MASTER);
  92               		.loc 1 131 5 is_stmt 1 view .LVU25
  93               		.loc 1 131 22 is_stmt 0 view .LVU26
  94 002a 81E0      		ldi r24,lo8(1)
  95 002c 9091 0000 		lds r25,usbstate.6078
  96 0030 9130      		cpi r25,lo8(1)
  97 0032 01F0      		breq .L4
  98 0034 80E0      		ldi r24,0
  99               	.L4:
 100               	/* epilogue start */
 132:quantum/split_common/split_util.c **** }
 101               		.loc 1 132 1 view .LVU27
 102 0036 0895      		ret
 103               		.cfi_endproc
 104               	.LFE114:
 106               		.section	.text.is_keyboard_left,"ax",@progbits
 107               		.weak	is_keyboard_left
 109               	is_keyboard_left:
 110               	.LFB113:
 103:quantum/split_common/split_util.c **** #if defined(SPLIT_HAND_PIN)
 111               		.loc 1 103 51 is_stmt 1 view -0
 112               		.cfi_startproc
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
 120:quantum/split_common/split_util.c **** }
 117               		.loc 1 120 5 view .LVU29
 120:quantum/split_common/split_util.c **** }
 118               		.loc 1 120 12 is_stmt 0 view .LVU30
 119 0000 0C94 0000 		jmp is_keyboard_master
 120               	.LVL2:
 121               		.cfi_endproc
 122               	.LFE113:
 124               		.section	.text.split_pre_init,"ax",@progbits
 125               	.global	split_pre_init
 127               	split_pre_init:
 128               	.LFB115:
 133:quantum/split_common/split_util.c **** 
 134:quantum/split_common/split_util.c **** // this code runs before the keyboard is fully initialized
 135:quantum/split_common/split_util.c **** void split_pre_init(void) {
 129               		.loc 1 135 27 is_stmt 1 view -0
 130               		.cfi_startproc
 131               	/* prologue: function */
 132               	/* frame size = 0 */
 133               	/* stack size = 0 */
 134               	.L__stack_usage = 0
 136:quantum/split_common/split_util.c ****     isLeftHand = is_keyboard_left();
 135               		.loc 1 136 5 view .LVU32
 136               		.loc 1 136 18 is_stmt 0 view .LVU33
 137 0000 0E94 0000 		call is_keyboard_left
 138               	.LVL3:
 139               		.loc 1 136 16 view .LVU34
 140 0004 8093 0000 		sts isLeftHand,r24
 137:quantum/split_common/split_util.c **** 
 138:quantum/split_common/split_util.c **** #if defined(RGBLIGHT_ENABLE) && defined(RGBLED_SPLIT)
 139:quantum/split_common/split_util.c ****     uint8_t num_rgb_leds_split[2] = RGBLED_SPLIT;
 140:quantum/split_common/split_util.c ****     if (isLeftHand) {
 141:quantum/split_common/split_util.c ****         rgblight_set_clipping_range(0, num_rgb_leds_split[0]);
 142:quantum/split_common/split_util.c ****     } else {
 143:quantum/split_common/split_util.c ****         rgblight_set_clipping_range(num_rgb_leds_split[0], num_rgb_leds_split[1]);
 144:quantum/split_common/split_util.c ****     }
 145:quantum/split_common/split_util.c **** #endif
 146:quantum/split_common/split_util.c **** 
 147:quantum/split_common/split_util.c ****     if (is_keyboard_master()) {
 141               		.loc 1 147 5 is_stmt 1 view .LVU35
 142               		.loc 1 147 9 is_stmt 0 view .LVU36
 143 0008 0E94 0000 		call is_keyboard_master
 144               	.LVL4:
 145               		.loc 1 147 8 view .LVU37
 146 000c 8111      		cpse r24,__zero_reg__
 148:quantum/split_common/split_util.c **** #if defined(USE_I2C) && defined(SSD1306OLED)
 149:quantum/split_common/split_util.c ****         matrix_master_OLED_init();
 150:quantum/split_common/split_util.c **** #endif
 151:quantum/split_common/split_util.c ****         transport_master_init();
 147               		.loc 1 151 9 is_stmt 1 view .LVU38
 148 000e 0C94 0000 		jmp transport_master_init
 149               	.LVL5:
 150               	.L9:
 151               	/* epilogue start */
 152:quantum/split_common/split_util.c ****     }
 153:quantum/split_common/split_util.c **** }
 152               		.loc 1 153 1 is_stmt 0 view .LVU39
 153 0012 0895      		ret
 154               		.cfi_endproc
 155               	.LFE115:
 157               		.section	.text.split_post_init,"ax",@progbits
 158               	.global	split_post_init
 160               	split_post_init:
 161               	.LFB116:
 154:quantum/split_common/split_util.c **** 
 155:quantum/split_common/split_util.c **** // this code runs after the keyboard is fully initialized
 156:quantum/split_common/split_util.c **** //   - avoids race condition during matrix_init_quantum where slave can start
 157:quantum/split_common/split_util.c **** //     receiving before the init process has completed
 158:quantum/split_common/split_util.c **** void split_post_init(void) {
 162               		.loc 1 158 28 is_stmt 1 view -0
 163               		.cfi_startproc
 164               	/* prologue: function */
 165               	/* frame size = 0 */
 166               	/* stack size = 0 */
 167               	.L__stack_usage = 0
 159:quantum/split_common/split_util.c ****     if (!is_keyboard_master()) {
 168               		.loc 1 159 5 view .LVU41
 169               		.loc 1 159 10 is_stmt 0 view .LVU42
 170 0000 0E94 0000 		call is_keyboard_master
 171               	.LVL6:
 172               		.loc 1 159 8 view .LVU43
 173 0004 8111      		cpse r24,__zero_reg__
 174 0006 00C0      		rjmp .L11
 160:quantum/split_common/split_util.c ****         transport_slave_init();
 175               		.loc 1 160 9 is_stmt 1 view .LVU44
 176 0008 0C94 0000 		jmp transport_slave_init
 177               	.LVL7:
 178               	.L11:
 179               	/* epilogue start */
 161:quantum/split_common/split_util.c ****     }
 162:quantum/split_common/split_util.c **** }
 180               		.loc 1 162 1 is_stmt 0 view .LVU45
 181 000c 0895      		ret
 182               		.cfi_endproc
 183               	.LFE116:
 185               		.section	.bss.usbstate.6078,"aw",@nobits
 188               	usbstate.6078:
 189 0000 00        		.zero	1
 190               	.global	isLeftHand
 191               		.section	.data.isLeftHand,"aw"
 194               	isLeftHand:
 195 0000 01        		.byte	1
 196               		.text
 197               	.Letext0:
 198               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdint.h"
 199               		.file 5 "/usr/local/Cellar/avr-gcc@8/8.4.0/lib/avr-gcc/8/gcc/avr/8.4.0/include/stddef.h"
 200               		.file 6 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdio.h"
 201               		.file 7 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdlib.h"
 202               		.file 8 "quantum/split_common/split_util.h"
 203               		.file 9 "tmk_core/common/timer.h"
 204               		.file 10 "tmk_core/common/action.h"
 205               		.file 11 "tmk_core/common/report.h"
 206               		.file 12 "tmk_core/common/host.h"
 207               		.file 13 "tmk_core/common/avr/xprintf.h"
 208               		.file 14 "tmk_core/common/debug.h"
 209               		.file 15 "quantum/keycode_config.h"
 210               		.file 16 "quantum/keymap.h"
 211               		.file 17 "tmk_core/common/action_layer.h"
 212               		.file 18 "tmk_core/common/action_util.h"
 213               		.file 19 "quantum/process_keycode/process_tap_dance.h"
 214               		.file 20 "quantum/quantum.h"
 215               		.file 21 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 216               		.file 22 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 217               		.file 23 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 218               		.file 24 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 219               		.file 25 "quantum/split_common/transport.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 split_util.c
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:4      *ABS*:000000000000003f __SREG__
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:13     .text.is_keyboard_master:0000000000000000 is_keyboard_master
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:188    .bss.usbstate.6078:0000000000000000 usbstate.6078
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:109    .text.is_keyboard_left:0000000000000000 is_keyboard_left
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:127    .text.split_pre_init:0000000000000000 split_pre_init
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:194    .data.isLeftHand:0000000000000000 isLeftHand
/var/folders/7y/kbn66ztx1rs80r6yv6v16f4r0000gn/T//ccXfYYAa.s:160    .text.split_post_init:0000000000000000 split_post_init

UNDEFINED SYMBOLS
transport_master_init
transport_slave_init
__do_copy_data
__do_clear_bss
